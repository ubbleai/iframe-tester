{"version":3,"sources":["redux/app/app.selectors.ts","redux/ui/ui.selectors.ts","redux/app/app.slice.ts","components/iframe/iframe.tsx","components/iframe-settings/iframe-settings.tsx","components/navbar/navbar.tsx","redux/ui/ui.slice.ts","components/dark-theme-switcher/dark-theme-switcher.tsx","components/log-viewer/log-viewer.tsx","App.tsx","serviceWorker.ts","redux/rootReducer.ts","redux/store.ts","index.tsx"],"names":["selectUrl","app","url","selectRefreshTS","refreshTs","selectHeight","height","selectWidth","width","selectAllowCamera","allowCamera","selectLogs","logs","selectDarkMode","ui","darkMode","INITIAL_STATE","undefined","Date","now","appSlice","createSlice","name","initialState","reducers","setUrl","state","payload","setHeight","setWidth","updateIFrame","setAllowCamera","addLog","resetLogs","actions","Iframe","ref","createRef","useSelector","dispatch","useDispatch","useEffect","ubble","Ubble","IDV","current","identificationUrl","events","onComplete","event","date","content","JSON","stringify","onAbort","destroy","className","IFrameSettings","setter","handleOnChangeNumber","value","target","label","id","leftIcon","autoComplete","type","onChange","console","log","String","checked","labelElement","innerLabelChecked","innerLabel","handleSwitch","onClick","text","icon","intent","Nav","children","align","Alignment","LEFT","uiSlice","toggleDarkMode","DarkThemeSwitcher","LogViewer","useState","isOpen","toggleOpen","length","map","Fragment","key","App","ubbleLoaded","setUbbleLoaded","useDarkTheme","document","body","classList","add","remove","a","window","waitUbble","appClassnames","classNames","isValid","iframeContent","RIGHT","Boolean","location","hostname","match","rootReducer","combineReducers","reducer","persistReducer","storage","localforage","store","configureStore","persistor","persistStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.70683370.chunk.js","sourcesContent":["import { RootState } from \"../rootReducer\";\n\nexport const selectUrl = ({ app }: RootState) => app.url;\nexport const selectRefreshTS = ({ app }: RootState) => app.refreshTs;\nexport const selectHeight = ({ app }: RootState) => app.height;\nexport const selectWidth = ({ app }: RootState) => app.width;\nexport const selectAllowCamera = ({app}: RootState) => app.allowCamera;\nexport const selectLogs = ({app}: RootState) => app.logs;\n","import { RootState } from \"../rootReducer\";\n\nexport const selectDarkMode = ({ ui }: RootState) => ui.darkMode;\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface Log {\n  date: number;\n  content: string;\n}\n\ninterface State {\n  url: string | undefined;\n  refreshTs: number;\n  width: number;\n  height: number;\n  allowCamera: boolean;\n  logs: Log[];\n}\n\nconst INITIAL_STATE: State = {\n  url: undefined,\n  refreshTs: Date.now(),\n  width: 600,\n  height: 500,\n  allowCamera: true,\n  logs: [],\n};\n\nconst appSlice = createSlice({\n  name: \"app\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    setUrl: (state, { payload }: PayloadAction<string>) => {\n      state.url = payload;\n    },\n    setHeight: (state, { payload }: PayloadAction<number>) => {\n      state.height = payload;\n    },\n    setWidth: (state, { payload }: PayloadAction<number>) => {\n      state.width = payload;\n    },\n    updateIFrame: (state) => {\n      state.refreshTs = Date.now();\n    },\n    setAllowCamera: (state, { payload }: PayloadAction<boolean>) => {\n      state.allowCamera = payload;\n    },\n    addLog: (state, { payload }: PayloadAction<Log>) => {\n      const { logs } = state;\n      state.logs = [...logs, payload];\n    },\n    resetLogs: (state) => {\n      state.logs = [];\n    },\n  },\n});\n\nexport default appSlice;\n\nconst actions = appSlice.actions;\nconst {\n  updateIFrame,\n  setHeight,\n  setWidth,\n  setUrl,\n  setAllowCamera,\n  addLog,\n  resetLogs,\n} = actions;\n\nexport {\n  updateIFrame,\n  setHeight,\n  setWidth,\n  setUrl,\n  setAllowCamera,\n  addLog,\n  resetLogs,\n};\n","import React, { createRef, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectAllowCamera,\n  selectHeight,\n  selectUrl,\n  selectWidth,\n} from \"../../redux/app/app.selectors\";\nimport { addLog, resetLogs } from \"../../redux/app/app.slice\";\n\ndeclare const Ubble: any;\n\ninterface Props {\n  refreshTs: number;\n}\n\nexport const Iframe = ({ refreshTs }: Props) => {\n  const ref = createRef<HTMLDivElement>();\n  const url = useSelector(selectUrl);\n  const width = useSelector(selectWidth);\n  const height = useSelector(selectHeight);\n  const allowCamera = useSelector(selectAllowCamera);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const ubble = new Ubble.IDV(ref.current, {\n      height: height,\n      width: width,\n      identificationUrl: url,\n      allowCamera: allowCamera,\n      events: {\n        onComplete: (event: any) => {\n          dispatch(\n            addLog({\n              date: Date.now(),\n              content: JSON.stringify(event),\n            })\n          );\n        },\n        onAbort: (event: any) => {\n          dispatch(\n            addLog({\n              date: Date.now(),\n              content: JSON.stringify(event),\n            })\n          );\n        },\n      },\n    });\n\n    return () => {\n      dispatch(resetLogs);\n      ubble.destroy();\n    };\n  }, [refreshTs]);\n\n  return <div ref={ref} className=\"iframe-ref\" />;\n};\n","import React, { ChangeEvent } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button, FormGroup, InputGroup, Switch } from \"@blueprintjs/core\";\nimport {\n  selectAllowCamera,\n  selectHeight,\n  selectUrl,\n  selectWidth,\n} from \"redux/app/app.selectors\";\nimport {\n  setAllowCamera,\n  setHeight,\n  setUrl,\n  setWidth,\n  updateIFrame,\n} from \"redux/app/app.slice\";\nimport { ActionCreatorWithPayload } from \"@reduxjs/toolkit\";\n\nexport const IFrameSettings: React.FC = () => {\n  const url = useSelector(selectUrl);\n  const height = useSelector(selectHeight);\n  const width = useSelector(selectWidth);\n  const allowCamera = useSelector(selectAllowCamera);\n  const dispatch = useDispatch();\n  const submit = () => {\n    dispatch(updateIFrame());\n  };\n\n  const handleOnChange = (setter: ActionCreatorWithPayload<string>) => {\n    return (event: ChangeEvent<HTMLInputElement>) => {\n      const { value } = event.target;\n      console.log(value, event);\n      dispatch(setter(value));\n    };\n  };\n\n  const handleOnChangeNumber = (setter: ActionCreatorWithPayload<number>) => {\n    return (event: ChangeEvent<HTMLInputElement>) => {\n      const { value } = event.target;\n      dispatch(setter(+value));\n    };\n  };\n\n  const handleSwitch = (setter: ActionCreatorWithPayload<boolean>) => {\n    return (event: ChangeEvent<HTMLInputElement>) => {\n      const { checked } = event.target;\n      dispatch(setter(checked));\n    };\n  };\n\n  return (\n    <div className=\"iframe-settings\">\n      <FormGroup label=\"Identification URL\">\n        <InputGroup\n          id=\"url\"\n          leftIcon=\"link\"\n          autoComplete=\"off\"\n          type=\"url\"\n          value={url}\n          onChange={handleOnChange(setUrl)}\n        />\n      </FormGroup>\n      <FormGroup label=\"Height\">\n        <InputGroup\n          id=\"height\"\n          leftIcon=\"changes\"\n          autoComplete=\"off\"\n          value={String(height)}\n          type=\"number\"\n          onChange={handleOnChangeNumber(setHeight)}\n        />\n      </FormGroup>\n      <FormGroup label=\"Width\">\n        <InputGroup\n          id=\"width\"\n          leftIcon=\"exchange\"\n          autoComplete=\"off\"\n          value={String(width)}\n          type=\"number\"\n          onChange={handleOnChangeNumber(setWidth)}\n        />\n      </FormGroup>\n      <FormGroup label=\"Allow Camera\">\n        <Switch\n          checked={allowCamera}\n          labelElement=\"Allow Camera\"\n          innerLabelChecked=\"yes\"\n          innerLabel=\"no\"\n          onChange={handleSwitch(setAllowCamera)}\n        />\n      </FormGroup>\n      <Button onClick={submit} text=\"Update\" icon=\"refresh\" intent=\"primary\" />\n    </div>\n  );\n};\n","import React, { ReactNode } from \"react\";\nimport {\n  Alignment,\n  Navbar,\n  NavbarDivider,\n  NavbarGroup,\n  NavbarHeading,\n} from \"@blueprintjs/core\";\n\ninterface Props {\n  children?: ReactNode;\n}\n\nexport const Nav = ({ children }: Props) => {\n  return (\n    <Navbar>\n      <NavbarGroup align={Alignment.LEFT}>\n        <NavbarHeading>Iframe Tester</NavbarHeading>\n        <NavbarDivider />\n      </NavbarGroup>\n      {children}\n    </Navbar>\n  );\n};\n","import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\ninterface State {\n  darkMode: boolean;\n}\n\nconst INITIAL_STATE: State = {\n  darkMode: false\n};\n\nconst uiSlice = createSlice({\n  name: \"ui\",\n  initialState: INITIAL_STATE,\n  reducers: {\n    toggleDarkMode: (state, { payload }: PayloadAction<boolean>) => {\n      state.darkMode = payload;\n    }\n  }\n});\n\nexport default uiSlice;\n\nconst actions = uiSlice.actions;\nconst { toggleDarkMode } = actions;\n\nexport { toggleDarkMode };\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { Icon, Switch } from \"@blueprintjs/core\";\nimport { selectDarkMode } from \"redux/ui/ui.selectors\";\nimport { toggleDarkMode } from \"redux/ui/ui.slice\";\n\nexport const DarkThemeSwitcher: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const darkMode = useSelector(selectDarkMode);\n\n  const onChangeDarkTheme = (event: React.FormEvent<HTMLElement>) => {\n    const { checked } = event.target as HTMLInputElement;\n    dispatch(toggleDarkMode(checked));\n  };\n  return (\n    <>\n      <Icon icon={darkMode ? \"moon\" : \"flash\"} />\n      <Switch checked={darkMode} onChange={onChangeDarkTheme} />\n    </>\n  );\n};\n","import React, { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Button, Collapse, Pre } from \"@blueprintjs/core\";\n\nimport { selectLogs } from \"redux/app/app.selectors\";\n\nexport const LogViewer = () => {\n  const [isOpen, toggleOpen] = useState<boolean>(false);\n\n  const logs = useSelector(selectLogs);\n\n  const onClickToggle = () => {\n    toggleOpen(!isOpen);\n  };\n\n  const content =\n    logs.length === 0 ? (\n      <span className=\"no-logs\">(empty)</span>\n    ) : (\n      logs.map((log) => (\n        <React.Fragment key={log.date}>{log.content}</React.Fragment>\n      ))\n    );\n\n  return (\n    <>\n      <Button\n        onClick={onClickToggle}\n        text={isOpen ? \"Close Log Viewer\" : \"Open Log Viewer\"}\n      />\n      <Collapse isOpen={isOpen}>\n        <Pre>{content}</Pre>\n      </Collapse>\n    </>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Alignment, Divider, NavbarGroup } from \"@blueprintjs/core\";\nimport classNames from \"classnames\";\n\nimport \"./App.scss\";\n\nimport { selectRefreshTS, selectUrl } from \"redux/app/app.selectors\";\nimport { selectDarkMode } from \"redux/ui/ui.selectors\";\n\nimport { Iframe } from \"components/iframe/\";\nimport { IFrameSettings } from \"components/iframe-settings\";\nimport { Nav } from \"components/navbar\";\nimport { DarkThemeSwitcher } from \"components/dark-theme-switcher\";\nimport { LogViewer } from \"components/log-viewer\";\n\nconst BP_DARK = \"bp3-dark\";\n\nfunction App() {\n  const [ubbleLoaded, setUbbleLoaded] = useState<boolean>(false);\n  const refreshTs = useSelector(selectRefreshTS);\n  const useDarkTheme = useSelector(selectDarkMode);\n  const url = useSelector(selectUrl);\n\n  useEffect(() => {\n    if (useDarkTheme) {\n      document.body.classList.add(BP_DARK);\n    } else {\n      document.body.classList.remove(BP_DARK);\n    }\n  });\n\n  useEffect(() => {\n    const waitUbble = async () => {\n      // @ts-ignore\n      await window.ubbleLoaded;\n      setUbbleLoaded(true);\n    };\n    waitUbble();\n  });\n\n  const appClassnames = classNames({\n    [BP_DARK]: useDarkTheme\n  });\n\n  const isValid = !!url;\n\n  const iframeContent = ubbleLoaded ? (\n    <Iframe refreshTs={refreshTs} />\n  ) : (\n    <div>Loading</div>\n  );\n\n  return (\n    <div className={appClassnames}>\n      <Nav>\n        <NavbarGroup align={Alignment.RIGHT}>\n          <DarkThemeSwitcher />\n        </NavbarGroup>\n      </Nav>\n      <div className=\"content\">\n        <IFrameSettings />\n        <Divider />\n        <div className=\"iframe-container\">\n          {isValid ? (\n            iframeContent\n          ) : (\n            <div>\n              Enter an <strong>Identification URL</strong> to continue\n            </div>\n          )}\n          <Divider />\n          <div className=\"log-viewer-container\">\n            <LogViewer />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from \"@reduxjs/toolkit\";\nimport localforage from \"localforage\";\n\nimport appSlice from \"./app/app.slice\";\nimport uiSlice from \"./ui/ui.slice\";\nimport { persistReducer } from \"redux-persist\";\nconst rootReducer = combineReducers({\n  app: appSlice.reducer,\n  ui: persistReducer({ key: \"ui\", storage: localforage }, uiSlice.reducer)\n});\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import { configureStore, Action } from \"@reduxjs/toolkit\";\nimport rootReducer, { RootState } from \"./rootReducer\";\nimport { ThunkAction } from \"redux-thunk\";\nimport { persistStore } from 'redux-persist';\n\nconst store = configureStore({\n  reducer: rootReducer\n});\n\n// @ts-ignore\nif (process.env.NODE_ENV !== 'production' && module.hot) {\n  // @ts-ignore\n  module.hot.accept('./rootReducer', () => {\n    const newRootReducer = require('./rootReducer').default;\n    store.replaceReducer(newRootReducer);\n  });\n}\n\nexport const persistor = persistStore(store);\n\nexport default store;\n\n\nexport type AppThunk = ThunkAction<void, RootState, null, Action<string>>;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport store, { persistor } from \"./redux/store\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}